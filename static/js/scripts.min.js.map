{"version":3,"sources":["..\\dev\\js\\scripts.js"],"names":["tasks","id","entryTimestamp","taskTitle","taskMessage","taskMarker","editingItemId","dateSort","getItemData","form","document","querySelector","addEventListener","e","preventDefault","formData","Object","fromEntries","FormData","target","timestamp","Date","getTime","entryIndex","findIndex","x","editedObject","lastEditTimestamp","console","log","newObject","length","push","unshift","buildItemList","reset","rebuild","itemsWrapper","forEach","markupInnerHtml","createTaskInnerMarkup","task","markup","createElement","className","dataset","innerHTML","prepend","existingElement","existingItem","find","undefined","newItem","taskElement","append","item","attachEventListener","classList","contains","editItem","closest","Number","itemData","objectKeys","keys","objectValues","values","key","index","includes","element","value","filterResults","tasksWrapper","filterByDate","filterByMarker","reverse"],"mappings":"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","sourcesContent":["const tasks = [\r\n    {\r\n        id: 0,\r\n        entryTimestamp: 1614010031296,\r\n        taskTitle: 'Title 1',\r\n        taskMessage: 'Message 1',\r\n        taskMarker: 'gray'\r\n    },\r\n    {\r\n        id: 1,\r\n        entryTimestamp: 1614010031396,\r\n        taskTitle: 'Title 2',\r\n        taskMessage: 'Message 2',\r\n        taskMarker: 'green'\r\n    },\r\n    {\r\n        id: 2,\r\n        entryTimestamp: 1614010031696,\r\n        taskTitle: 'Title 3',\r\n        taskMessage: 'Message 3',\r\n        taskMarker: 'red'\r\n    },\r\n];\r\n\r\nlet editingItemId;\r\nlet dateSort = 'newest';\r\n\r\n\r\nconst getItemData = () => {\r\n\r\n    const form = document.querySelector('.js_form');\r\n\r\n    form.addEventListener('submit', (e) => {\r\n\r\n        e.preventDefault();\r\n        const formData = Object.fromEntries(new FormData(e.target));\r\n        const timestamp = new Date().getTime();\r\n\r\n        if (editingItemId >= 0) {\r\n\r\n            // we are editing an existing item\r\n            // find the item in the tasks array by the id\r\n            // create a new object with updated properties (new property: lastEditTimestamp)\r\n            // overwrite the data in tasks[entryIndex]\r\n\r\n\r\n            const entryIndex = tasks.findIndex(x => x.id === editingItemId);\r\n\r\n            const editedObject = {\r\n                id: editingItemId,\r\n                entryTimestamp: tasks[entryIndex].entryTimestamp,\r\n                lastEditTimestamp: timestamp,\r\n                ...formData\r\n            }\r\n\r\n            tasks[entryIndex] = editedObject;\r\n\r\n            console.log('DATA FOR SERVER - UPDATE');\r\n            console.log(`\r\n                const url = 'https://someurl.com/tasks/2';\r\n                const data = {\r\n                    id: 2,\r\n                    entryTimeStamp: 1614156855456,\r\n                    lastEditTimestamp: 1614156860000,\r\n                    taskTitle: 'Some title',\r\n                    taskMessage: 'Some message',\r\n                    taskMarker: 'red'\r\n                };\r\n                fetch(url, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type: 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n            `);\r\n\r\n        } else {\r\n\r\n            // we are creating a new item\r\n            // set the id and entryTimestamp\r\n            // spread the data from the form elements\r\n\r\n            const newObject = {\r\n                id: tasks.length,\r\n                entryTimestamp: timestamp,\r\n                ...formData\r\n            }\r\n\r\n            // if entryDate === 'newest' the item is pushed to the end of tasksArray\r\n            // if entryDate === 'oldest' the item is added to the beginning od the tasksArray\r\n\r\n            if (dateSort === 'newest') {\r\n                tasks.push(newObject);\r\n            } else {\r\n                tasks.unshift(newObject);\r\n            }\r\n\r\n            console.log('DATA FOR SERVER - NEW ENTRY');\r\n            console.log(`\r\n                const url = 'https://someurl.com/tasks';\r\n                const data = {\r\n                    id: 3,\r\n                    entryTimeStamp: 1614156855456,\r\n                    taskTitle: 'Some title',\r\n                    taskMessage: 'Some message',\r\n                    taskMarker: 'red'\r\n                };\r\n                fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type: 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n            `);\r\n        }\r\n\r\n        buildItemList();\r\n\r\n        // reset the form\r\n        e.target.reset();\r\n\r\n    });\r\n\r\n}\r\n\r\nconst buildItemList = (rebuild = false) => {\r\n\r\n    const itemsWrapper = document.querySelector('.js_tasksWrapper');\r\n\r\n    if (rebuild) {\r\n\r\n        // repopulate the itemsWrapper element - was previously emptyed in filterResults()\r\n\r\n        tasks.forEach(task => {\r\n\r\n            const markupInnerHtml = createTaskInnerMarkup(task);\r\n\r\n            const markup = document.createElement('div');\r\n            markup.className = `task is-${task.taskMarker}`;\r\n            markup.dataset.id = task.id;\r\n\r\n            markup.innerHTML = markupInnerHtml;\r\n\r\n            itemsWrapper.prepend(markup);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    if (editingItemId >= 0) {\r\n\r\n        // we are editing an existing entry\r\n        // find an existing element in the DOM and an existing item in the tasks array using the editingItemId\r\n        // change/update the markers class\r\n        // update the existing element innerHTML\r\n        // we are done editing, set the ediitingItemId to undefined\r\n\r\n        const existingElement = itemsWrapper.querySelector(`[data-id=\"${editingItemId}\"`);\r\n        const existingItem = tasks.find(x => x .id === editingItemId);\r\n        existingElement.className = `task is-${existingItem.taskMarker}`;\r\n        existingElement.innerHTML = createTaskInnerMarkup(existingItem);\r\n\r\n        editingItemId = undefined;\r\n\r\n        return;\r\n    }\r\n\r\n    // we are adding the last entry of tasks array if entryDate sorting is set to 'newest', or first entry if it is set to 'oldest'\r\n\r\n    let newItem;\r\n    if (dateSort === 'newest') {\r\n        newItem = tasks[tasks.length - 1];\r\n    } else {\r\n        newItem = tasks[0];\r\n    }\r\n\r\n    // create new div, add classes and data-id to id and fill it up with inner content\r\n\r\n    const taskElement = document.createElement('div');\r\n    taskElement.className = `task is-${newItem.taskMarker}`;\r\n    taskElement.dataset.id = tasks.length - 1;\r\n\r\n    taskElement.innerHTML = createTaskInnerMarkup(newItem);\r\n\r\n    // if entryDate === 'newest' the item is prepended to the beginning\r\n    // if entryDate === 'oldest' the item is appended to the end\r\n\r\n    if (dateSort === 'newest') {\r\n        itemsWrapper.prepend(taskElement);\r\n    } else {\r\n        itemsWrapper.append(taskElement);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst createTaskInnerMarkup = item => {\r\n\r\n    // return the inner markup for a single task\r\n\r\n    return `\r\n        <div class=\"task__inner_wrap\">\r\n            <a role=\"button\" class=\"task__edit_btn js_editTask\">Edit</a>\r\n            <p class=\"task__title\">${item.taskTitle}</p>\r\n            <p class=\"task__message\">${item.taskMessage}</p>\r\n        </div>\r\n    `;\r\n}\r\n\r\nconst attachEventListener = () => {\r\n\r\n    // attach click event to \"EDIT\" buttons which are created dynamically\r\n\r\n    const itemsWrapper = document.querySelector('.js_tasksWrapper')\r\n\r\n    itemsWrapper.addEventListener('click', (e) => {\r\n        if(e.target.classList.contains('js_editTask')) {\r\n            editItem(e.target.closest('.task').dataset.id);\r\n        }\r\n    });\r\n\r\n}\r\n\r\nconst editItem = (id) => {\r\n\r\n    // when the edit button is clicked, get the id of the task\r\n    // find the item with that id in the tasks array an d get it's keys and values\r\n    // loop through the keys (exclude id and timestamps)\r\n    // repopulate the form elements based on the name=\"key\" attribute\r\n\r\n    editingItemId = Number(id);\r\n    const itemData = tasks.find(x => x.id === editingItemId);\r\n    const form = document.querySelector('.js_form');\r\n    const objectKeys = Object.keys(itemData);\r\n    const objectValues = Object.values(itemData);\r\n\r\n    objectKeys.forEach((key, index) => {\r\n\r\n        if (['id', 'entryTimestamp', 'lastEditTimestamp'].includes(key)) return;\r\n\r\n        const element = form.querySelector(`[name=\"${key}\"]`);\r\n        const value = objectValues[index];\r\n        element.value = value;\r\n\r\n    });\r\n}\r\n\r\nconst filterResults = () => {\r\n\r\n    const form = document.querySelector('.js_filtersForm');\r\n    const tasksWrapper = document.querySelector('.js_tasksWrapper');\r\n    const filterByDate = form.querySelector('.js_filterByDate');\r\n    const filterByMarker = form.querySelector('.js_filterByMarker');\r\n\r\n    filterByMarker.addEventListener('change', (e) => {\r\n\r\n        // every time the value changes\r\n        // reset the tasksWrapper className\r\n\r\n        const value = e.target.value;\r\n        tasksWrapper.className = `wrapper__tasks js_tasksWrapper show-${value}-markers`\r\n    });\r\n\r\n    filterByDate.addEventListener('change', (e) => {\r\n\r\n        // every time da value get change, reverse the tasks array\r\n        // update the global dateSort variable (needed for later use)\r\n        // empty the tasksWrapper innerHTML and rebuild it inside buildItemList\r\n\r\n        dateSort = e.target.value;\r\n        tasks.reverse();\r\n        tasksWrapper.innerHTML = '';\r\n        buildItemList(true);\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\ngetItemData();\r\nattachEventListener();\r\nfilterResults();\r\nbuildItemList(true);"]}
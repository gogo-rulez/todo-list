{"version":3,"sources":["..\\..\\_dev\\js\\scripts.js"],"names":["tasks","id","entryTimestamp","taskTitle","taskMessage","taskMarker","editingItemId","dateSort","getItemData","document","querySelector","addEventListener","e","preventDefault","formData","Object","fromEntries","FormData","target","timestamp","Date","getTime","entryIndex","findIndex","x","editedObject","lastEditTimestamp","console","log","newObject","length","push","unshift","buildItemList","reset","rebuild","arguments","undefined","itemsWrapper","forEach","task","markupInnerHtml","createTaskInnerMarkup","markup","createElement","className","dataset","innerHTML","prepend","existingElement","existingItem","find","newItem","taskElement","append","item","attachEventListener","classList","contains","editItem","closest","Number","itemData","form","objectKeys","keys","objectValues","values","key","index","includes","element","value","filterResults","tasksWrapper","filterByDate","reverse"],"mappings":"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","sourcesContent":["const tasks = [\r\n    {\r\n        id: 0,\r\n        entryTimestamp: 1614010031296,\r\n        taskTitle: 'Title 1',\r\n        taskMessage: 'Message 1',\r\n        taskMarker: 'gray'\r\n    },\r\n    {\r\n        id: 1,\r\n        entryTimestamp: 1614010031396,\r\n        taskTitle: 'Title 2',\r\n        taskMessage: 'Message 2',\r\n        taskMarker: 'green'\r\n    },\r\n    {\r\n        id: 2,\r\n        entryTimestamp: 1614010031696,\r\n        taskTitle: 'Title 3',\r\n        taskMessage: 'Message 3',\r\n        taskMarker: 'red'\r\n    },\r\n];\r\n\r\nlet editingItemId;\r\nlet dateSort = 'newest';\r\n\r\n\r\nconst getItemData = () => {\r\n\r\n    const form = document.querySelector('.js_form');\r\n\r\n    form.addEventListener('submit', (e) => {\r\n\r\n        e.preventDefault();\r\n        const formData = Object.fromEntries(new FormData(e.target));\r\n        const timestamp = new Date().getTime();\r\n\r\n        if (editingItemId >= 0) {\r\n\r\n            // we are editing an existing item\r\n            // find the item in the tasks array by the id\r\n            // create a new object with updated properties (new property: lastEditTimestamp)\r\n            // overwrite the data in tasks[entryIndex]\r\n\r\n\r\n            const entryIndex = tasks.findIndex(x => x.id === editingItemId);\r\n\r\n            const editedObject = {\r\n                id: editingItemId,\r\n                entryTimestamp: tasks[entryIndex].entryTimestamp,\r\n                lastEditTimestamp: timestamp,\r\n                ...formData\r\n            }\r\n\r\n            tasks[entryIndex] = editedObject;\r\n\r\n            console.log('DATA FOR SERVER - UPDATE');\r\n            console.log(`\r\n                const url = 'https://someurl.com/tasks/2';\r\n                const data = {\r\n                    id: 2,\r\n                    entryTimeStamp: 1614156855456,\r\n                    lastEditTimestamp: 1614156860000,\r\n                    taskTitle: 'Some title',\r\n                    taskMessage: 'Some message',\r\n                    taskMarker: 'red'\r\n                };\r\n                fetch(url, {\r\n                    method: 'PATCH',\r\n                    headers: {\r\n                        'Content-Type: 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n            `);\r\n\r\n        } else {\r\n\r\n            // we are creating a new item\r\n            // set the id and entryTimestamp\r\n            // spread the data from the form elements\r\n\r\n            const newObject = {\r\n                id: tasks.length,\r\n                entryTimestamp: timestamp,\r\n                ...formData\r\n            }\r\n\r\n            // if entryDate === 'newest' the item is pushed to the end of tasksArray\r\n            // if entryDate === 'oldest' the item is added to the beginning od the tasksArray\r\n\r\n            if (dateSort === 'newest') {\r\n                tasks.push(newObject);\r\n            } else {\r\n                tasks.unshift(newObject);\r\n            }\r\n\r\n            console.log('DATA FOR SERVER - NEW ENTRY');\r\n            console.log(`\r\n                const url = 'https://someurl.com/tasks';\r\n                const data = {\r\n                    id: 3,\r\n                    entryTimeStamp: 1614156855456,\r\n                    taskTitle: 'Some title',\r\n                    taskMessage: 'Some message',\r\n                    taskMarker: 'red'\r\n                };\r\n                fetch(url, {\r\n                    method: 'POST',\r\n                    headers: {\r\n                        'Content-Type: 'application/json; charset=UTF-8'\r\n                    },\r\n                    body: JSON.stringify(data)\r\n                });\r\n            `);\r\n        }\r\n\r\n        buildItemList();\r\n\r\n        // reset the form\r\n        e.target.reset();\r\n\r\n    });\r\n\r\n}\r\n\r\nconst buildItemList = (rebuild = false) => {\r\n\r\n    const itemsWrapper = document.querySelector('.js_tasksWrapper');\r\n\r\n    if (rebuild) {\r\n\r\n        // repopulate the itemsWrapper element - was previously emptyed in filterResults()\r\n\r\n        tasks.forEach(task => {\r\n\r\n            const markupInnerHtml = createTaskInnerMarkup(task);\r\n\r\n            const markup = document.createElement('div');\r\n            markup.className = `task is-${task.taskMarker}`;\r\n            markup.dataset.id = task.id;\r\n\r\n            markup.innerHTML = markupInnerHtml;\r\n\r\n            itemsWrapper.prepend(markup);\r\n        });\r\n\r\n        return;\r\n    }\r\n\r\n    if (editingItemId >= 0) {\r\n\r\n        // we are editing an existing entry\r\n        // find an existing element in the DOM and an existing item in the tasks array using the editingItemId\r\n        // change/update the markers class\r\n        // update the existing element innerHTML\r\n        // we are done editing, set the ediitingItemId to undefined\r\n\r\n        const existingElement = itemsWrapper.querySelector(`[data-id=\"${editingItemId}\"`);\r\n        const existingItem = tasks.find(x => x .id === editingItemId);\r\n        existingElement.className = `task is-${existingItem.taskMarker}`;\r\n        existingElement.innerHTML = createTaskInnerMarkup(existingItem);\r\n\r\n        editingItemId = undefined;\r\n\r\n        return;\r\n    }\r\n\r\n    // we are adding the last entry of tasks array if entryDate sorting is set to 'newest', or first entry if it is set to 'oldest'\r\n\r\n    let newItem;\r\n    if (dateSort === 'newest') {\r\n        newItem = tasks[tasks.length - 1];\r\n    } else {\r\n        newItem = tasks[0];\r\n    }\r\n\r\n    // create new div, add classes and data-id to id and fill it up with inner content\r\n\r\n    const taskElement = document.createElement('div');\r\n    taskElement.className = `task is-${newItem.taskMarker}`;\r\n    taskElement.dataset.id = tasks.length - 1;\r\n\r\n    taskElement.innerHTML = createTaskInnerMarkup(newItem);\r\n\r\n    // if entryDate === 'newest' the item is prepended to the beginning\r\n    // if entryDate === 'oldest' the item is appended to the end\r\n\r\n    if (dateSort === 'newest') {\r\n        itemsWrapper.prepend(taskElement);\r\n    } else {\r\n        itemsWrapper.append(taskElement);\r\n    }\r\n\r\n\r\n}\r\n\r\nconst createTaskInnerMarkup = item => {\r\n\r\n    // return the inner markup for a single task\r\n\r\n    return `\r\n        <div class=\"task__inner_wrap\">\r\n            <a role=\"button\" class=\"task__edit_btn js_editTask\">Edit</a>\r\n            <p class=\"task__title\">${item.taskTitle}</p>\r\n            <p class=\"task__message\">${item.taskMessage}</p>\r\n        </div>\r\n    `;\r\n}\r\n\r\nconst attachEventListener = () => {\r\n\r\n    // attach click event to \"EDIT\" buttons which are created dynamically\r\n\r\n    const itemsWrapper = document.querySelector('.js_tasksWrapper')\r\n\r\n    itemsWrapper.addEventListener('click', (e) => {\r\n        if(e.target.classList.contains('js_editTask')) {\r\n            editItem(e.target.closest('.task').dataset.id);\r\n        }\r\n    });\r\n\r\n}\r\n\r\nconst editItem = (id) => {\r\n\r\n    // when the edit button is clicked, get the id of the task\r\n    // find the item with that id in the tasks array an d get it's keys and values\r\n    // loop through the keys (exclude id and timestamps)\r\n    // repopulate the form elements based on the name=\"key\" attribute\r\n\r\n    editingItemId = Number(id);\r\n    const itemData = tasks.find(x => x.id === editingItemId);\r\n    const form = document.querySelector('.js_form');\r\n    const objectKeys = Object.keys(itemData);\r\n    const objectValues = Object.values(itemData);\r\n\r\n    objectKeys.forEach((key, index) => {\r\n\r\n        if (['id', 'entryTimestamp', 'lastEditTimestamp'].includes(key)) return;\r\n\r\n        const element = form.querySelector(`[name=\"${key}\"]`);\r\n        const value = objectValues[index];\r\n        element.value = value;\r\n\r\n    });\r\n}\r\n\r\nconst filterResults = () => {\r\n\r\n    const form = document.querySelector('.js_filtersForm');\r\n    const tasksWrapper = document.querySelector('.js_tasksWrapper');\r\n    const filterByDate = form.querySelector('.js_filterByDate');\r\n    const filterByMarker = form.querySelector('.js_filterByMarker');\r\n\r\n    filterByMarker.addEventListener('change', (e) => {\r\n\r\n        // every time the value changes\r\n        // reset the tasksWrapper className\r\n\r\n        const value = e.target.value;\r\n        tasksWrapper.className = `wrapper__tasks js_tasksWrapper show-${value}-markers`\r\n    });\r\n\r\n    filterByDate.addEventListener('change', (e) => {\r\n\r\n        // every time da value get change, reverse the tasks array\r\n        // update the global dateSort variable (needed for later use)\r\n        // empty the tasksWrapper innerHTML and rebuild it inside buildItemList\r\n\r\n        dateSort = e.target.value;\r\n        tasks.reverse();\r\n        tasksWrapper.innerHTML = '';\r\n        buildItemList(true);\r\n    });\r\n\r\n}\r\n\r\n\r\n\r\ngetItemData();\r\nattachEventListener();\r\nfilterResults();\r\nbuildItemList(true);"]}
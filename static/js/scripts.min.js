"use strict";var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source)Object.prototype.hasOwnProperty.call(source,key)&&(target[key]=source[key])}return target},tasks=[{id:0,entryTimestamp:1614010031296,taskTitle:"Title 1",taskMessage:"Message 1",taskMarker:"gray"},{id:1,entryTimestamp:1614010031396,taskTitle:"Title 2",taskMessage:"Message 2",taskMarker:"green"},{id:2,entryTimestamp:1614010031696,taskTitle:"Title 3",taskMessage:"Message 3",taskMarker:"red"}],editingItemId=void 0,dateSort="newest",getItemData=function(){document.querySelector(".js_form").addEventListener("submit",function(e){e.preventDefault();var formData=Object.fromEntries(new FormData(e.target)),timestamp=(new Date).getTime();if(0<=editingItemId){var entryIndex=tasks.findIndex(function(x){return x.id===editingItemId}),editedObject=_extends({id:editingItemId,entryTimestamp:tasks[entryIndex].entryTimestamp,lastEditTimestamp:timestamp},formData);tasks[entryIndex]=editedObject,console.log("DATA FOR SERVER - UPDATE"),console.log("\n                const url = 'https://someurl.com/tasks/2';\n                const data = {\n                    id: 2,\n                    entryTimeStamp: 1614156855456,\n                    lastEditTimestamp: 1614156860000,\n                    taskTitle: 'Some title',\n                    taskMessage: 'Some message',\n                    taskMarker: 'red'\n                };\n                fetch(url, {\n                    method: 'PATCH',\n                    headers: {\n                        'Content-Type: 'application/json; charset=UTF-8'\n                    },\n                    body: JSON.stringify(data)\n                });\n            ")}else{var newObject=_extends({id:tasks.length,entryTimestamp:timestamp},formData);"newest"===dateSort?tasks.push(newObject):tasks.unshift(newObject),console.log("DATA FOR SERVER - NEW ENTRY"),console.log("\n                const url = 'https://someurl.com/tasks';\n                const data = {\n                    id: 3,\n                    entryTimeStamp: 1614156855456,\n                    taskTitle: 'Some title',\n                    taskMessage: 'Some message',\n                    taskMarker: 'red'\n                };\n                fetch(url, {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type: 'application/json; charset=UTF-8'\n                    },\n                    body: JSON.stringify(data)\n                });\n            ")}buildItemList(),e.target.reset()})},buildItemList=function(){var rebuild=0<arguments.length&&void 0!==arguments[0]&&arguments[0],itemsWrapper=document.querySelector(".js_tasksWrapper");if(rebuild)tasks.forEach(function(task){var markupInnerHtml=createTaskInnerMarkup(task),markup=document.createElement("div");markup.className="task is-"+task.taskMarker,markup.dataset.id=task.id,markup.innerHTML=markupInnerHtml,itemsWrapper.prepend(markup)});else{if(0<=editingItemId){var existingElement=itemsWrapper.querySelector('[data-id="'+editingItemId+'"'),existingItem=tasks.find(function(x){return x.id===editingItemId});return existingElement.className="task is-"+existingItem.taskMarker,existingElement.innerHTML=createTaskInnerMarkup(existingItem),void(editingItemId=void 0)}var newItem=void 0;newItem="newest"===dateSort?tasks[tasks.length-1]:tasks[0];var taskElement=document.createElement("div");taskElement.className="task is-"+newItem.taskMarker,taskElement.dataset.id=tasks.length-1,taskElement.innerHTML=createTaskInnerMarkup(newItem),"newest"===dateSort?itemsWrapper.prepend(taskElement):itemsWrapper.append(taskElement)}},createTaskInnerMarkup=function(item){return'\n        <div class="task__inner_wrap">\n            <a role="button" class="task__edit_btn js_editTask">Edit</a>\n            <p class="task__title">'+item.taskTitle+'</p>\n            <p class="task__message">'+item.taskMessage+"</p>\n        </div>\n    "},attachEventListener=function(){document.querySelector(".js_tasksWrapper").addEventListener("click",function(e){e.target.classList.contains("js_editTask")&&editItem(e.target.closest(".task").dataset.id)})},editItem=function(id){editingItemId=Number(id);var itemData=tasks.find(function(x){return x.id===editingItemId}),form=document.querySelector(".js_form"),objectKeys=Object.keys(itemData),objectValues=Object.values(itemData);objectKeys.forEach(function(key,index){if(!["id","entryTimestamp","lastEditTimestamp"].includes(key)){var element=form.querySelector('[name="'+key+'"]'),value=objectValues[index];element.value=value}})},filterResults=function(){var form=document.querySelector(".js_filtersForm"),tasksWrapper=document.querySelector(".js_tasksWrapper"),filterByDate=form.querySelector(".js_filterByDate");form.querySelector(".js_filterByMarker").addEventListener("change",function(e){var value=e.target.value;tasksWrapper.className="wrapper__tasks js_tasksWrapper show-"+value+"-markers"}),filterByDate.addEventListener("change",function(e){dateSort=e.target.value,tasks.reverse(),tasksWrapper.innerHTML="",buildItemList(!0)})};getItemData(),attachEventListener(),filterResults(),buildItemList(!0);
//# sourceMappingURL=scripts.min.js.map